(LOG_FILE) {
    log {
        format formatted "[{ts}] {request>remote_addr} {request>proto} {request>method} <- {status} -> {request>host} {request>uri} {request>headers>User-Agent>[0]}"  {
            time_format "iso8601"
        }
        output file "{args.0}" {
            roll_size 100mb
            roll_keep 3
            roll_keep_for 7d
        }
    }
}

(TLS_MODERN) {
    protocols tls1.3
}

(TLS_INTERMEDIATE) {
    protocols tls1.2 tls1.3
    ciphers TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
}

(TLS_OLD) {
    protocols tls1.0 tls1.3
    ciphers TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_3DES_EDE_CBC_SHA
}

(HSTS) {
    # HSTS (63072000 seconds)
    header / Strict-Transport-Security "max-age=63072000"
}

(SECURITY) {
    # hidden server name
    header -Server
}

(ACME_PROVIDER_CLOUDFLARE) {
    dns cloudflare {$CLOUDFLARE_API_TOKEN}
}

(ACME_PROVIDER_DNSPOD) {
    dns dnspod {$DNSPOD_TOKEN}
}

(ACME_PROVIDER_DUCKDNS) {
    dns duckdns {$DUCKDNS_API_TOKEN}
}

(ACME_PROVIDER_GANDI) {
    dns gandi {$GANDI_API_TOKEN}
}

(ACME_PROVIDER_ALIYUN) {
    dns alidns {
        access_key_id {$ALIYUN_ACCESS_KEY_ID}
        access_key_secret {$ALIYUN_ACCESS_KEY_SECRET}
    }
}

(ACME_DNS) {
    # 压缩支持
    encode zstd gzip

    # TLS 配置
    tls {
        import TLS_MODERN
        import ACME_PROVIDER_{args.0}
        resolvers 8.8.8.8
    }

    # HSTS
    import HSTS

    # security config
    import SECURITY
}


(ACME_HTTP) {
    # 压缩支持
    encode zstd gzip

    # TLS 配置
    tls {
        import TLS_MODERN
        resolvers 8.8.8.8
    }

    # HSTS
    import HSTS

    # security config
    import SECURITY
}

# 开启 HTTP3 实验性支持
# sysctl -w net.core.rmem_max=2500000
# ref https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size
{
    # ZeroSSL
    acme_ca https://acme.zerossl.com/v2/DV90
    email {$ACME_EMAIL:}
    cert_issuer {$ACME_ISSUER:} {$ACME_ISSUER_PARAMS:}

    # ECC cert
    key_type p384

    servers :443 {
        listener_wrappers {
            trojan
        }
        protocol {
            allow_h2c
            experimental_http3
        }
    }

    order trojan before reverse_proxy
    order teapot after trojan

    trojan {
        caddy
        no_proxy
        users {$TROJAN_PASSWORD:}
    }
}

import /etc/caddy/*.caddy
